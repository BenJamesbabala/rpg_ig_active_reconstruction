<?xml version="1.0"?>
<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<!-- debug prefix:  launch-prefix="gdb -ex run (2)-args" -->
<launch>
	<node pkg="octomap_server" type="dr_octomap_server" name="octomap_dense_reconstruction" output="screen" clear_params="true">
	  
		<!-- Whether or not ray display messages are published for rviz to visualize the casted rays -->
		<param name="display_rays" value="false" />
	    
                <param name="resolution" value="0.01" /> <!-- 0.005 -->
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="dr_origin" /><!-- dr_origin with svo -->
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="1.50" />
		
		<!-- camera info topic -->
		<param name="camera_info_topic" value="/camera/left/camera_info" /><!-- for stereo cam simulation -->
		<!--<param name="camera_info_topic" value="/bluefox_ros_node/camera_info" />-->
		
		<!--<param name="filter_ground" value="true" />
		<param name="ground_filter/distance" value="0.1" />
		<param name="ground_filter/angle" value="0.2" />
		<param name="ground_filter/plane_distance" value="0.2" />-->
		
		<!-- max z -->
		<!--<param name="pointcloud_min_z" value="0" />
		<param name="pointcloud_max_z" value="0.5" />-->
		<!-- max z if octomap publishes (doesn't affect internal map)
		<param name="occupancy_min_z" value="1.5" />
		<param name="occupancy_max_z" value="0" />-->
		
		<param name="filter_speckles" value="true" />
		<param name="latch" value="false" />
		
		<!-- color setting: -->
		<param name="publish_colors" value="false" />
		
		<!-- bounding box:  -->
		<param name="update_volume/min/x" value="-1.5" />
		<param name="update_volume/min/y" value="-1.5" />
		<param name="update_volume/min/z" value="-10" />
		<param name="update_volume/max/x" value="1.5" />
		<param name="update_volume/max/y" value="1.5" />
		<param name="update_volume/max/z" value="1.5" />
                
                <param name="calculate_occlusion" value="true"/>
                
                
                
                <param name="use_icp" value="false" /> <!-- Whether iterative closest point is used to match incoming pointclouds, default:false -->
		
		<param name="occupancy_threshold" value="0.8"/> <!--default: 0.5 -->

		<!-- use stereo sensor model (quadratic error) -->
		<param name="sensor_model/stereo_model" value="true"/>

		<!-- stereo model error coefficient: P_hit' = P_hit * C * (max_range^2 / d^2) -->
		<param name="sensor_model/stereo_error_coeff" value="8.887"/><!--8.887-->
		
		<param name="sensor_model/hit" value="0.8"/> <!-- probability for being occupied on a hit, default: 0.7 -->
		<param name="sensor_model/miss" value="0.2"/><!-- probability for being occupied on a miss, default: 0.4 -->
                <param name="sensor_model/min" value="0.03"/> <!-- lower clamping threshold, default: 0.12 -->
                <param name="sensor_model/max" value="0.97"/><!-- upper clamping threshold, default: 0.97 -->
		
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/remode/pointcloud_single" />
	
	</node>
</launch>
